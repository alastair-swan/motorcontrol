#include <napi.h>
using namespace Napi;

Number setNoStop(const CallbackInfo &info);
Number setStopDuty(const CallbackInfo &info);
Number setStartDuty(const CallbackInfo &info);
Number setChangeDuty(const CallbackInfo &info);
Number setMaxDuty(const CallbackInfo &info);
Number setStartRPM(const CallbackInfo &info);
Number setMaxDutyHysteresis(const CallbackInfo &info);
Number setSpeedSlope(const CallbackInfo &info);
Number setMaxOpen(const CallbackInfo &info);
Number setMaxOff(const CallbackInfo &info);
Number setSpeedSlope2(const CallbackInfo &info);
Number setChargePumpVCP(const CallbackInfo &info);
Number setOpenLoop(const CallbackInfo &info);
Number setPID(const CallbackInfo &info);
Number setStandbyMode(const CallbackInfo &info);
Number setDirection(const CallbackInfo &info);
Number setPoles(const CallbackInfo &info);
Number setMaxSpeed(const CallbackInfo &info);
Number setSpeedOutputMode(const CallbackInfo &info);
Number setSpeedInversion(const CallbackInfo &info);
Number setAutoRecoveryMode(const CallbackInfo &info);
Number setDigitalFiltering(const CallbackInfo &info);
Number setForcedComutationProtection(const CallbackInfo &info);
Number setDutyChangeLimit(const CallbackInfo &info);
Number setStartCurrentLimit(const CallbackInfo &info);
Number setOCPDisable(const CallbackInfo &info);
Number setSoftStartRange(const CallbackInfo &info);
Number setSoftStartStepSize(const CallbackInfo &info);
Number setSoftStartDutyChangeLimit(const CallbackInfo &info);
Number setDutyUpTime(const CallbackInfo &info);
Number setRPMChangeLimit(const CallbackInfo &info);
Number setBrakeInverted(const CallbackInfo &info);
Number setOvercurrentProtectionDisabled(const CallbackInfo &info);
Number setRSAPinFiltering(const CallbackInfo &info);
Number setAutoDeadTimeControlDisabled(const CallbackInfo &info);
Number setBrakeTime(const CallbackInfo &info);
Number setBrakeMode(const CallbackInfo &info);
Number setBrakeReleaseMode(const CallbackInfo &info);
Number setErrorBrakingMode(const CallbackInfo &info);
Number setAlertInverted(const CallbackInfo &info);
Number setThermalShutdownDisable(const CallbackInfo &info);
Number setAutoRestartWaitTime(const CallbackInfo &info);
Number setFirstDCExcitationTime(const CallbackInfo &info);
Number setLeadAngle(const CallbackInfo &info);
Number setMaxRPM(const CallbackInfo &info);
Number setForcedComutationFrequency(const CallbackInfo &info);
Number setOutputPWMFrequencyMode(const CallbackInfo &info);
Number setDeadTime(const CallbackInfo &info);
Number setOvercurrentDetectionThreshold(const CallbackInfo &info);
Number setOvercurrentProtectionGain(const CallbackInfo &info);
Number setGateSourceCurrent(const CallbackInfo &info);
Number setGateSinkCurrent(const CallbackInfo &info);
Number setIdleModeHysteresisVoltage(const CallbackInfo &info);
Number setSpeed(const CallbackInfo &info);

Number getNoStop(const CallbackInfo &info);
Number getStopDuty(const CallbackInfo &info);
Number getStartDuty(const CallbackInfo &info);
Number getChangeDuty(const CallbackInfo &info);
Number getMaxDuty(const CallbackInfo &info);
Number getStartRPM(const CallbackInfo &info);
Number getMaxDutyHysteresis(const CallbackInfo &info);
Number getSpeedSlope(const CallbackInfo &info);
Number getMaxOpen(const CallbackInfo &info);
Number getMaxOff(const CallbackInfo &info);
Number getSpeedSlope2(const CallbackInfo &info);
Number getChargePumpVCP(const CallbackInfo &info);
Number getOpenLoop(const CallbackInfo &info);
Number getKIX(const CallbackInfo &info);
Number getKI(const CallbackInfo &info);
Number getKPX(const CallbackInfo &info);
Number getKP(const CallbackInfo &info);
Number getStandbyMode(const CallbackInfo &info);
Number getDirection(const CallbackInfo &info);
Number getPoles(const CallbackInfo &info);
Number getMaxSpeed(const CallbackInfo &info);
Number getSpeedOutputMode(const CallbackInfo &info);
Number getSpeedInversion(const CallbackInfo &info);
Number getAutoRecoveryMode(const CallbackInfo &info);
Number getDigitalFiltering(const CallbackInfo &info);
Number getForcedComutationProtection(const CallbackInfo &info);
Number getDutyChangeLimit(const CallbackInfo &info);
Number getStartCurrentLimit(const CallbackInfo &info);
Number getOCPDisable(const CallbackInfo &info);
Number getSoftStartRange(const CallbackInfo &info);
Number getSoftStartStepSize(const CallbackInfo &info);
Number getSoftStartDutyChangeLimit(const CallbackInfo &info);
Number getDutyUpTime(const CallbackInfo &info);
Number getRPMChangeLimit(const CallbackInfo &info);
Number getBrakeInverted(const CallbackInfo &info);
Number getOvercurrentProtectionDisabled(const CallbackInfo &info);
Number getRSAPinFiltering(const CallbackInfo &info);
Number getAutoDeadTimeControlDisabled(const CallbackInfo &info);
Number getBrakeTime(const CallbackInfo &info);
Number getBrakeMode(const CallbackInfo &info);
Number getBrakeReleaseMode(const CallbackInfo &info);
Number getErrorBrakingMode(const CallbackInfo &info);
Number getAlertInverted(const CallbackInfo &info);
Number getThermalShutdownDisable(const CallbackInfo &info);
Number getAutoRestartWaitTime(const CallbackInfo &info);
Number getFirstDCExcitationTime(const CallbackInfo &info);
Number getLeadAngle(const CallbackInfo &info);
Number getMaxRPM(const CallbackInfo &info);
Number getForcedComutationFrequency(const CallbackInfo &info);
Number getOutputPWMFrequencyMode(const CallbackInfo &info);
Number getDeadTime(const CallbackInfo &info);
Number getOvercurrentDetectionThreshold(const CallbackInfo &info);
Number getOvercurrentProtectionGain(const CallbackInfo &info);
Number getGateSourceCurrent(const CallbackInfo &info);
Number getGateSinkCurrent(const CallbackInfo &info);
Number getIdleModeHysteresisVoltage(const CallbackInfo &info);
Number getSpeedSetting(const CallbackInfo &info);
Number getRPM(const CallbackInfo &info);

//Function MotorSetParam(Env env);
//Function MotorGetParam(Env env);

Object Init(Env env, Object exports)
{
  exports.Set("setNoStop", Function::New(env, setNoStop));
  exports.Set("setStopDuty", Function::New(env, setStopDuty));
  exports.Set("setStartDuty", Function::New(env, setStartDuty));
  exports.Set("setChangeDuty", Function::New(env, setChangeDuty));
  exports.Set("setMaxDuty", Function::New(env, setMaxDuty));
  exports.Set("setStartRPM", Function::New(env, setStartRPM));
  exports.Set("setMaxDutyHysteresis", Function::New(env, setMaxDutyHysteresis));
  exports.Set("setSpeedSlope", Function::New(env, setSpeedSlope));
  exports.Set("setMaxOpen", Function::New(env, setMaxOpen));
  exports.Set("setMaxOff", Function::New(env, setMaxOff));
  exports.Set("setSpeedSlope2", Function::New(env, setSpeedSlope2));
  exports.Set("setChargePumpVCP", Function::New(env, setChargePumpVCP));
  exports.Set("setOpenLoop", Function::New(env, setOpenLoop));
  exports.Set("setPID", Function::New(env, setPID));
  exports.Set("setStandbyMode", Function::New(env, setStandbyMode));
  exports.Set("setDirection", Function::New(env, setDirection));
  exports.Set("setPoles", Function::New(env, setPoles));
  exports.Set("setMaxSpeed", Function::New(env, setMaxSpeed));
  exports.Set("setSpeedOutputMode", Function::New(env, setSpeedOutputMode));
  exports.Set("setSpeedInversion", Function::New(env, setSpeedInversion));
  exports.Set("setAutoRecoveryMode", Function::New(env, setAutoRecoveryMode));
  exports.Set("setDigitalFiltering", Function::New(env, setDigitalFiltering));
  exports.Set("setForcedComutationProtection", Function::New(env, setForcedComutationProtection));
  exports.Set("setDutyChangeLimit", Function::New(env, setDutyChangeLimit));
  exports.Set("setStartCurrentLimit", Function::New(env, setStartCurrentLimit));
  exports.Set("setOCPDisable", Function::New(env, setOCPDisable));
  exports.Set("setSoftStartRange", Function::New(env, setSoftStartRange));
  exports.Set("setSoftStartStepSize", Function::New(env, setSoftStartStepSize));
  exports.Set("setSoftStartDutyChangeLimit", Function::New(env, setSoftStartDutyChangeLimit));
  exports.Set("setDutyUpTime", Function::New(env, setDutyUpTime));
  exports.Set("setRPMChangeLimit", Function::New(env, setRPMChangeLimit));
  exports.Set("setBrakeInverted", Function::New(env, setBrakeInverted));
  exports.Set("setOvercurrentProtectionDisabled", Function::New(env, setOvercurrentProtectionDisabled));
  exports.Set("setRSAPinFiltering", Function::New(env, setRSAPinFiltering));
  exports.Set("setAutoDeadTimeControlDisabled", Function::New(env, setAutoDeadTimeControlDisabled));
  exports.Set("setBrakeTime", Function::New(env, setBrakeTime));
  exports.Set("setBrakeMode", Function::New(env, setBrakeMode));
  exports.Set("setBrakeReleaseMode", Function::New(env, setBrakeReleaseMode));
  exports.Set("setErrorBrakingMode", Function::New(env, setErrorBrakingMode));
  exports.Set("setAlertInverted", Function::New(env, setAlertInverted));
  exports.Set("setThermalShutdownDisable", Function::New(env, setThermalShutdownDisable));
  exports.Set("setAutoRestartWaitTime", Function::New(env, setAutoRestartWaitTime));
  exports.Set("setFirstDCExcitationTime", Function::New(env, setFirstDCExcitationTime));
  exports.Set("setLeadAngle", Function::New(env, setLeadAngle));
  exports.Set("setMaxRPM", Function::New(env, setMaxRPM));
  exports.Set("setForcedComutationFrequency", Function::New(env, setForcedComutationFrequency));
  exports.Set("setOutputPWMFrequencyMode", Function::New(env, setOutputPWMFrequencyMode));
  exports.Set("setDeadTime", Function::New(env, setDeadTime));
  exports.Set("setOvercurrentDetectionThreshold", Function::New(env, setOvercurrentDetectionThreshold));
  exports.Set("setRSAPinFiltering", Function::New(env, setRSAPinFiltering));
  exports.Set("setAutoDeadTimeControlDisabled", Function::New(env, setAutoDeadTimeControlDisabled));
  exports.Set("setBrakeTime", Function::New(env, setBrakeTime));
  exports.Set("setBrakeMode", Function::New(env, setBrakeMode));
  exports.Set("setBrakeReleaseMode", Function::New(env, setBrakeReleaseMode));
  exports.Set("setErrorBrakingMode", Function::New(env, setErrorBrakingMode));
  exports.Set("setAlertInverted", Function::New(env, setAlertInverted));
  exports.Set("setThermalShutdownDisable", Function::New(env, setThermalShutdownDisable));
  exports.Set("setAutoRestartWaitTime", Function::New(env, setAutoRestartWaitTime));
  exports.Set("setFirstDCExcitationTime", Function::New(env, setFirstDCExcitationTime));
  exports.Set("setLeadAngle", Function::New(env, setLeadAngle));
  exports.Set("setMaxRPM", Function::New(env, setMaxRPM));
  exports.Set("setForcedComutationFrequency", Function::New(env, setForcedComutationFrequency));
  exports.Set("setOutputPWMFrequencyMode", Function::New(env, setOutputPWMFrequencyMode));
  exports.Set("setDeadTime", Function::New(env, setDeadTime));
  exports.Set("setOvercurrentDetectionThreshold", Function::New(env, setOvercurrentDetectionThreshold));
  exports.Set("setOvercurrentProtectionGain", Function::New(env, setOvercurrentProtectionGain));
  exports.Set("setGateSourceCurrent", Function::New(env, setGateSourceCurrent));
  exports.Set("setGateSinkCurrent", Function::New(env, setGateSinkCurrent));
  exports.Set("setIdleModeHysteresisVoltage", Function::New(env, setIdleModeHysteresisVoltage));
  exports.Set("setSpeed", Function::New(env, setSpeed));

  exports.Set("getNoStop", Function::New(env, getNoStop));
  exports.Set("getStopDuty", Function::New(env, getStopDuty));
  exports.Set("getStartDuty", Function::New(env, getStartDuty));
  exports.Set("getChangeDuty", Function::New(env, getChangeDuty));
  exports.Set("getMaxDuty", Function::New(env, getMaxDuty));
  exports.Set("getStartRPM", Function::New(env, getStartRPM));
  exports.Set("getMaxDutyHysteresis", Function::New(env, getMaxDutyHysteresis));
  exports.Set("getSpeedSlope", Function::New(env, getSpeedSlope));
  exports.Set("getMaxOpen", Function::New(env, getMaxOpen));
  exports.Set("getMaxOff", Function::New(env, getMaxOff));
  exports.Set("getSpeedSlope2", Function::New(env, getSpeedSlope2));
  exports.Set("getChargePumpVCP", Function::New(env, getChargePumpVCP));
  exports.Set("getOpenLoop", Function::New(env, getOpenLoop));
  exports.Set("getKIX", Function::New(env, getKIX));
  exports.Set("getKI", Function::New(env, getKI));
  exports.Set("getKPX", Function::New(env, getKPX));
  exports.Set("getKP", Function::New(env, getKP));
  exports.Set("getStandbyMode", Function::New(env, getStandbyMode));
  exports.Set("getDirection", Function::New(env, getDirection));
  exports.Set("getPoles", Function::New(env, getPoles));
  exports.Set("getMaxSpeed", Function::New(env, getMaxSpeed));
  exports.Set("getSpeedOutputMode", Function::New(env, getSpeedOutputMode));
  exports.Set("getSpeedInversion", Function::New(env, getSpeedInversion));
  exports.Set("getAutoRecoveryMode", Function::New(env, getAutoRecoveryMode));
  exports.Set("getDigitalFiltering", Function::New(env, getDigitalFiltering));
  exports.Set("getForcedComutationProtection", Function::New(env, getForcedComutationProtection));
  exports.Set("getDutyChangeLimit", Function::New(env, getDutyChangeLimit));
  exports.Set("getStartCurrentLimit", Function::New(env, getStartCurrentLimit));
  exports.Set("getOCPDisable", Function::New(env, getOCPDisable));
  exports.Set("getSoftStartRange", Function::New(env, getSoftStartRange));
  exports.Set("getSoftStartStepSize", Function::New(env, getSoftStartStepSize));
  exports.Set("getSoftStartDutyChangeLimit", Function::New(env, getSoftStartDutyChangeLimit));
  exports.Set("getDutyUpTime", Function::New(env, getDutyUpTime));
  exports.Set("getRPMChangeLimit", Function::New(env, getRPMChangeLimit));
  exports.Set("getBrakeInverted", Function::New(env, getBrakeInverted));
  exports.Set("getOvercurrentProtectionDisabled", Function::New(env, getOvercurrentProtectionDisabled));
  exports.Set("getRSAPinFiltering", Function::New(env, getRSAPinFiltering));
  exports.Set("getAutoDeadTimeControlDisabled", Function::New(env, getAutoDeadTimeControlDisabled));
  exports.Set("getBrakeTime", Function::New(env, getBrakeTime));
  exports.Set("getBrakeMode", Function::New(env, getBrakeMode));
  exports.Set("getBrakeReleaseMode", Function::New(env, getBrakeReleaseMode));
  exports.Set("getErrorBrakingMode", Function::New(env, getErrorBrakingMode));
  exports.Set("getAlertInverted", Function::New(env, getAlertInverted));
  exports.Set("getThermalShutdownDisable", Function::New(env, getThermalShutdownDisable));
  exports.Set("getAutoRestartWaitTime", Function::New(env, getAutoRestartWaitTime));
  exports.Set("getFirstDCExcitationTime", Function::New(env, getFirstDCExcitationTime));
  exports.Set("getLeadAngle", Function::New(env, getLeadAngle));
  exports.Set("getMaxRPM", Function::New(env, getMaxRPM));
  exports.Set("getForcedComutationFrequency", Function::New(env, getForcedComutationFrequency));
  exports.Set("getOutputPWMFrequencyMode", Function::New(env, getOutputPWMFrequencyMode));
  exports.Set("getDeadTime", Function::New(env, getDeadTime));
  exports.Set("getOvercurrentDetectionThreshold", Function::New(env, getOvercurrentDetectionThreshold));
  exports.Set("getRSAPinFiltering", Function::New(env, getRSAPinFiltering));
  exports.Set("getAutoDeadTimeControlDisabled", Function::New(env, getAutoDeadTimeControlDisabled));
  exports.Set("getBrakeTime", Function::New(env, getBrakeTime));
  exports.Set("getBrakeMode", Function::New(env, getBrakeMode));
  exports.Set("getBrakeReleaseMode", Function::New(env, getBrakeReleaseMode));
  exports.Set("getErrorBrakingMode", Function::New(env, getErrorBrakingMode));
  exports.Set("getAlertInverted", Function::New(env, getAlertInverted));
  exports.Set("getThermalShutdownDisable", Function::New(env, getThermalShutdownDisable));
  exports.Set("getAutoRestartWaitTime", Function::New(env, getAutoRestartWaitTime));
  exports.Set("getFirstDCExcitationTime", Function::New(env, getFirstDCExcitationTime));
  exports.Set("getLeadAngle", Function::New(env, getLeadAngle));
  exports.Set("getMaxRPM", Function::New(env, getMaxRPM));
  exports.Set("getForcedComutationFrequency", Function::New(env, getForcedComutationFrequency));
  exports.Set("getOutputPWMFrequencyMode", Function::New(env, getOutputPWMFrequencyMode));
  exports.Set("getDeadTime", Function::New(env, getDeadTime));
  exports.Set("getOvercurrentDetectionThreshold", Function::New(env, getOvercurrentDetectionThreshold));
  exports.Set("getOvercurrentProtectionGain", Function::New(env, getOvercurrentProtectionGain));
  exports.Set("getGateSourceCurrent", Function::New(env, getGateSourceCurrent));
  exports.Set("getGateSinkCurrent", Function::New(env, getGateSinkCurrent));
  exports.Set("getIdleModeHysteresisVoltage", Function::New(env, getIdleModeHysteresisVoltage));
  exports.Set("getSpeedSetting", Function::New(env, getSpeedSetting)); 
  exports.Set("getRPM", Function::New(env, getRPM)); 
  //exports.Set("setParam", MotorSetParam(env));
  //exports.Set("getParam", MotorGetParam(env));
  return exports;
}

NODE_API_MODULE(addon, Init);